# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: ["staging"]
jobs:
  test:
    name: Testing go runtime
    runs-on: ubuntu-latest
    # Service containers to run with `container-job`, under use docker to setup database
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:17
        # Provide the password for postgres
        env:
          # POSTGRES_PASSWORD: phamnam123
          POSTGRES_USER: postgres
          POSTGRES_DB: core
          POSTGRES_HOST_AUTH_METHOD: trust
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Set up Go version 1.23
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"
        id: go

      - name: Checkout code into the Go module directory
        uses: actions/checkout@v4

      - name: Run Migration database
        run: psql -h localhost -U postgres -p 5432 -d bank-ytb -W -a -f ./init.sql

      - name: Copy file secrets.env to load virtual environment variable
        run: cp .env.example .env

      # - name: Go mod tidy
      #   run: go mod tidy

      # - name: Mod vendor
      #   run: go mod vendor

      - name: Testing core execute CRUD database
        run: go test -v -timeout 30s -cover -short ./database/sqlc/ -mo=vendor

      # - name: Testing Token
      #   run: go test -v -timeout 30s -cover -short ./plugin/pkg/token/
      #
      # - name: Testing send email
      #   run: go test -v -timeout 30s -cover ./plugin/pkg/mailer/
      #
      # - name: Testing API
      #   run: go test -v -timeout 30s -cover -short ./api/
