// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-http-server/core/internal/database/sqlc/ (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockgen_db -destination ./internal/database/mockgen/store.go github.com/go-http-server/core/internal/database/sqlc/ Store
//

// Package mockgen_db is a generated GoMock package.
package mockgen_db

import (
	context "context"
	reflect "reflect"

	sqlc "github.com/go-http-server/core/internal/database/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAccessPath mocks base method.
func (m *MockStore) CreateAccessPath(ctx context.Context, arg sqlc.CreateAccessPathParams) (sqlc.AccessPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPath", ctx, arg)
	ret0, _ := ret[0].(sqlc.AccessPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPath indicates an expected call of CreateAccessPath.
func (mr *MockStoreMockRecorder) CreateAccessPath(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPath", reflect.TypeOf((*MockStore)(nil).CreateAccessPath), ctx, arg)
}

// CreatePath mocks base method.
func (m *MockStore) CreatePath(ctx context.Context, arg sqlc.CreatePathParams) (sqlc.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePath", ctx, arg)
	ret0, _ := ret[0].(sqlc.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePath indicates an expected call of CreatePath.
func (mr *MockStoreMockRecorder) CreatePath(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePath", reflect.TypeOf((*MockStore)(nil).CreatePath), ctx, arg)
}

// CreateRole mocks base method.
func (m *MockStore) CreateRole(ctx context.Context, arg sqlc.CreateRoleParams) (sqlc.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, arg)
	ret0, _ := ret[0].(sqlc.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockStoreMockRecorder) CreateRole(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockStore)(nil).CreateRole), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg sqlc.CreateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// CreateUserTX mocks base method.
func (m *MockStore) CreateUserTX(arg0 context.Context, arg1 sqlc.CreateUserTXParams) (sqlc.CreateUserTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTX", arg0, arg1)
	ret0, _ := ret[0].(sqlc.CreateUserTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTX indicates an expected call of CreateUserTX.
func (mr *MockStoreMockRecorder) CreateUserTX(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTX", reflect.TypeOf((*MockStore)(nil).CreateUserTX), arg0, arg1)
}

// DeleteAccessPath mocks base method.
func (m *MockStore) DeleteAccessPath(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPath", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessPath indicates an expected call of DeleteAccessPath.
func (mr *MockStoreMockRecorder) DeleteAccessPath(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPath", reflect.TypeOf((*MockStore)(nil).DeleteAccessPath), ctx, id)
}

// GetAccessPath mocks base method.
func (m *MockStore) GetAccessPath(ctx context.Context, roleID int64) ([]sqlc.AccessPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPath", ctx, roleID)
	ret0, _ := ret[0].([]sqlc.AccessPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPath indicates an expected call of GetAccessPath.
func (mr *MockStoreMockRecorder) GetAccessPath(ctx, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPath", reflect.TypeOf((*MockStore)(nil).GetAccessPath), ctx, roleID)
}

// GetOnePath mocks base method.
func (m *MockStore) GetOnePath(ctx context.Context, id int64) (sqlc.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnePath", ctx, id)
	ret0, _ := ret[0].(sqlc.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnePath indicates an expected call of GetOnePath.
func (mr *MockStoreMockRecorder) GetOnePath(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnePath", reflect.TypeOf((*MockStore)(nil).GetOnePath), ctx, id)
}

// GetOneRole mocks base method.
func (m *MockStore) GetOneRole(ctx context.Context, id int64) (sqlc.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneRole", ctx, id)
	ret0, _ := ret[0].(sqlc.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneRole indicates an expected call of GetOneRole.
func (mr *MockStoreMockRecorder) GetOneRole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneRole", reflect.TypeOf((*MockStore)(nil).GetOneRole), ctx, id)
}

// GetRoles mocks base method.
func (m *MockStore) GetRoles(ctx context.Context, arg sqlc.GetRolesParams) ([]sqlc.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", ctx, arg)
	ret0, _ := ret[0].([]sqlc.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockStoreMockRecorder) GetRoles(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockStore)(nil).GetRoles), ctx, arg)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(ctx context.Context, identifier string) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, identifier)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(ctx, identifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), ctx, identifier)
}

// ListPaths mocks base method.
func (m *MockStore) ListPaths(ctx context.Context, arg sqlc.ListPathsParams) ([]sqlc.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaths", ctx, arg)
	ret0, _ := ret[0].([]sqlc.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaths indicates an expected call of ListPaths.
func (mr *MockStoreMockRecorder) ListPaths(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaths", reflect.TypeOf((*MockStore)(nil).ListPaths), ctx, arg)
}

// UpdatePath mocks base method.
func (m *MockStore) UpdatePath(ctx context.Context, arg sqlc.UpdatePathParams) (sqlc.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePath", ctx, arg)
	ret0, _ := ret[0].(sqlc.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePath indicates an expected call of UpdatePath.
func (mr *MockStoreMockRecorder) UpdatePath(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePath", reflect.TypeOf((*MockStore)(nil).UpdatePath), ctx, arg)
}

// UpdateRole mocks base method.
func (m *MockStore) UpdateRole(ctx context.Context, arg sqlc.UpdateRoleParams) (sqlc.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, arg)
	ret0, _ := ret[0].(sqlc.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockStoreMockRecorder) UpdateRole(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockStore)(nil).UpdateRole), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(ctx context.Context, arg sqlc.UpdateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), ctx, arg)
}
