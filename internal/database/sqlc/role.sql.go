// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
  role_name, description
) VALUES ($1, $2)
RETURNING id, role_name, description
`

type CreateRoleParams struct {
	RoleName    string      `json:"role_name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.RoleName, arg.Description)
	var i Role
	err := row.Scan(&i.ID, &i.RoleName, &i.Description)
	return i, err
}

const getOneRole = `-- name: GetOneRole :one
SELECT id, role_name, description FROM roles WHERE id = $1
`

func (q *Queries) GetOneRole(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRow(ctx, getOneRole, id)
	var i Role
	err := row.Scan(&i.ID, &i.RoleName, &i.Description)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, role_name, description FROM roles
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetRoles(ctx context.Context, arg GetRolesParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, getRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.RoleName, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET role_name = coalesce($2, role_name),
    description = coalesce($3, description)
WHERE id = $1
RETURNING id, role_name, description
`

type UpdateRoleParams struct {
	ID          int64       `json:"id"`
	RoleName    pgtype.Text `json:"role_name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.ID, arg.RoleName, arg.Description)
	var i Role
	err := row.Scan(&i.ID, &i.RoleName, &i.Description)
	return i, err
}
